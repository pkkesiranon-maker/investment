<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>เครื่องคำนวณแผนการลงทุนแบบทบต้น</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Kanit', sans-serif;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-gray-50 to-blue-100 flex items-center justify-center min-h-screen p-4">

    <div class="w-full max-w-3xl bg-white rounded-2xl shadow-xl p-6 md:p-8">
        
        <div class="text-center mb-8">
            <div class="flex justify-center items-center gap-3">
                 <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                </svg>
                <h1 class="text-2xl md:text-3xl font-bold text-slate-800">แผนการลงทุนแบบทบต้น</h1>
            </div>
            <p class="text-slate-500 mt-2">คำนวณและแสดงภาพการเติบโตของเงินลงทุนของคุณ</p>
        </div>

        <!-- Investment Input Form -->
        <div id="investment-form" class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <div>
                <label for="initialInvestment" class="block text-sm font-medium text-gray-700 mb-2">เงินลงทุนเริ่มต้น (USD)</label>
                <div class="relative">
                    <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                        <span class="text-gray-500 sm:text-sm">$</span>
                    </div>
                    <input type="number" id="initialInvestment" value="1000" class="w-full pl-7 pr-4 py-2 bg-gray-50 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                </div>
            </div>
            <div>
                <label for="currentValue" class="block text-sm font-medium text-gray-700 mb-2">มูลค่าปัจจุบัน (USD) <span class="text-gray-400">(ถ้ามี)</span></label>
                 <div class="relative">
                    <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                        <span class="text-gray-500 sm:text-sm">$</span>
                    </div>
                    <input type="number" id="currentValue" placeholder="ไม่บังคับ" class="w-full pl-7 pr-4 py-2 bg-gray-50 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                </div>
            </div>
            <div>
                <label for="monthlyReturn" class="block text-sm font-medium text-gray-700 mb-2">ผลตอบแทนต่อเดือน (%)</label>
                <div class="relative">
                    <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                          <path stroke-linecap="round" stroke-linejoin="round" d="M9 7h6m0 10v-3.25M15 10V5.75M9 17v-1.25" />
                          <path stroke-linecap="round" stroke-linejoin="round" d="M12 21a9 9 0 100-18 9 9 0 000 18z" />
                        </svg>
                    </div>
                    <input type="number" id="monthlyReturn" value="5" class="w-full pl-10 pr-4 py-2 bg-gray-50 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                </div>
            </div>
            <div>
                <label for="investmentPeriod" class="block text-sm font-medium text-gray-700 mb-2">ระยะเวลา (เดือน)</label>
                <div class="relative">
                    <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                       <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                          <path stroke-linecap="round" stroke-linejoin="round" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                    </div>
                    <input type="number" id="investmentPeriod" value="12" class="w-full pl-10 pr-4 py-2 bg-gray-50 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                </div>
            </div>
        </div>

        <div class="text-center mb-8">
            <button id="calculateBtn" class="bg-gradient-to-r from-blue-500 to-indigo-600 text-white font-semibold py-3 px-8 rounded-lg shadow-md hover:from-blue-600 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition transform hover:scale-105">
                คำนวณและสร้างกราฟ
            </button>
        </div>

        <!-- Chart Display Area -->
        <div class="bg-gray-50 p-4 rounded-xl">
            <canvas id="investmentChart"></canvas>
        </div>
        
        <!-- Result Summary -->
        <div id="resultSummary" class="text-center mt-6 text-lg text-gray-700"></div>

    </div>

    <script>
        const initialInvestmentEl = document.getElementById('initialInvestment');
        const monthlyReturnEl = document.getElementById('monthlyReturn');
        const investmentPeriodEl = document.getElementById('investmentPeriod');
        const currentValueEl = document.getElementById('currentValue');
        const calculateBtn = document.getElementById('calculateBtn');
        const resultSummaryEl = document.getElementById('resultSummary');
        const ctx = document.getElementById('investmentChart').getContext('2d');
        let investmentChart;
        
        const FALLBACK_USD_TO_THB_RATE = 36.7; // Fallback rate in case API fails

        // Function to fetch the latest exchange rate
        async function fetchCurrentExchangeRate() {
            try {
                const response = await fetch('https://api.exchangerate-api.com/v4/latest/USD');
                if (!response.ok) {
                    console.error("Could not fetch exchange rate, using fallback rate.");
                    return FALLBACK_USD_TO_THB_RATE;
                }
                const data = await response.json();
                return data.rates.THB;
            } catch (error) {
                console.error("Error fetching exchange rate:", error);
                return FALLBACK_USD_TO_THB_RATE; // Use fallback on network error
            }
        }

        async function calculateCompoundInterest() {
            // Show loading state
            resultSummaryEl.innerHTML = `<span class="text-gray-500">กำลังคำนวณและดึงข้อมูล...</span>`;
            
            const principal = parseFloat(initialInvestmentEl.value);
            const monthlyRate = parseFloat(monthlyReturnEl.value) / 100;
            const months = parseInt(investmentPeriodEl.value);
            const currentValueInput = parseFloat(currentValueEl.value);
            
            const USD_TO_THB_RATE = await fetchCurrentExchangeRate(); // Fetch latest rate


            // Input validation
            if (isNaN(principal) || principal <= 0 || isNaN(monthlyRate) || monthlyRate < 0 || isNaN(months) || months <= 0) {
                resultSummaryEl.innerHTML = '<span class="text-red-500">กรุณากรอกข้อมูลให้ถูกต้อง (ตัวเลขต้องมากกว่า 0)</span>';
                if (investmentChart) {
                    investmentChart.destroy();
                }
                return;
            }

            let currentValue = principal;
            const labels = ['เดือนที่ 0'];
            const data = [principal];

            for (let i = 1; i <= months; i++) {
                currentValue *= (1 + monthlyRate);
                labels.push(`เดือนที่ ${i}`);
                data.push(currentValue);
            }

            displayChart(labels, data, currentValueInput);
            
            const finalValue = data[data.length - 1];
            const totalProfit = finalValue - principal;

            const finalValueTHB = finalValue * USD_TO_THB_RATE;
            const totalProfitTHB = totalProfit * USD_TO_THB_RATE;
            
            resultSummaryEl.innerHTML = `
                <div class="space-y-3">
                    <p>สรุปผลลัพธ์หลังผ่านไป <span class="font-semibold text-blue-600">${months}</span> เดือน</p>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-left">
                        <!-- USD Card -->
                        <div class="bg-slate-50 p-4 rounded-lg border border-slate-200">
                             <p class="font-semibold text-slate-700 mb-1">สกุลเงิน USD</p>
                             <p class="text-sm text-slate-500">มูลค่าสุทธิ</p>
                             <p class="text-2xl font-bold text-green-600">${finalValue.toLocaleString('en-US', { style: 'currency', currency: 'USD' })}</p>
                             <hr class="my-2">
                             <p class="text-sm text-slate-500">กำไรทั้งหมด</p>
                             <p class="text-lg font-semibold text-slate-800">${totalProfit.toLocaleString('en-US', { style: 'currency', currency: 'USD' })}</p>
                        </div>
                         <!-- THB Card -->
                        <div class="bg-slate-50 p-4 rounded-lg border border-slate-200">
                             <p class="font-semibold text-slate-700 mb-1">สกุลเงิน THB</p>
                             <p class="text-sm text-slate-500">มูลค่าสุทธิ</p>
                             <p class="text-2xl font-bold text-green-600">${finalValueTHB.toLocaleString('th-TH', { style: 'currency', currency: 'THB' })}</p>
                             <hr class="my-2">
                             <p class="text-sm text-slate-500">กำไรทั้งหมด</p>
                             <p class="text-lg font-semibold text-slate-800">${totalProfitTHB.toLocaleString('th-TH', { style: 'currency', currency: 'THB' })}</p>
                        </div>
                    </div>
                    <p class="text-xs text-gray-400 pt-2">อัตราแลกเปลี่ยนปัจจุบัน: 1 USD ≈ ${USD_TO_THB_RATE.toFixed(2)} THB</p>
                </div>
            `;
        }

        function displayChart(labels, data, currentValue) {
            if (investmentChart) {
                investmentChart.destroy();
            }

            // Create gradient fill
            const gradient = ctx.createLinearGradient(0, 0, 0, 400);
            gradient.addColorStop(0, 'rgba(54, 162, 235, 0.6)');
            gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');

            const datasets = [{
                label: 'มูลค่าคาดการณ์ (USD)',
                data: data,
                backgroundColor: gradient,
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 3,
                tension: 0.4,
                fill: true,
                pointBackgroundColor: 'rgba(54, 162, 235, 1)',
                pointRadius: 4,
                pointHoverRadius: 7,
                pointHoverBorderColor: 'white',
                pointHoverBorderWidth: 2
            }];

            if (!isNaN(currentValue) && currentValue > 0) {
                let currentMonthIndex = -1;
                let closestDiff = Infinity;

                // Find the closest month index for the current value
                for(let i = 0; i < data.length; i++) {
                    const diff = Math.abs(data[i] - currentValue);
                    if (diff < closestDiff) {
                        closestDiff = diff;
                        currentMonthIndex = i;
                    }
                }
                
                if (currentMonthIndex !== -1) {
                    const currentPointData = new Array(data.length).fill(null);
                    currentPointData[currentMonthIndex] = data[currentMonthIndex]; // Snap to the line
                     datasets.push({
                        label: 'มูลค่าปัจจุบัน (โดยประมาณ)',
                        data: currentPointData,
                        backgroundColor: '#22c55e', // Green color
                        borderColor: '#16a34a',
                        pointRadius: 8,
                        pointHoverRadius: 10,
                        pointStyle: 'star',
                        fill: false,
                        showLine: false
                    });
                }
            }


            investmentChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    scales: {
                        y: {
                            beginAtZero: false,
                            grid: { color: 'rgba(200, 200, 200, 0.15)' },
                            ticks: { callback: value => '$' + value.toLocaleString() }
                        },
                        x: { grid: { display: false } }
                    },
                    plugins: {
                        legend: {
                           display: datasets.length > 1, 
                           position: 'top',
                           labels: {
                               usePointStyle: true,
                           }
                        },
                        tooltip: {
                            enabled: true,
                            backgroundColor: '#ffffff',
                            titleColor: '#334155',
                            titleFont: { size: 14, weight: 'bold', family: "'Kanit', sans-serif" },
                            bodyColor: '#475569',
                            bodyFont: { size: 12, family: "'Kanit', sans-serif" },
                            padding: 12,
                            borderColor: 'rgba(0,0,0,0.1)',
                            borderWidth: 1,
                            caretSize: 8,
                            cornerRadius: 8,
                            displayColors: false,
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) { label += ': '; }
                                    if (context.parsed.y !== null) {
                                        label += new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(context.parsed.y);
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                }
            });
        }

        calculateBtn.addEventListener('click', calculateCompoundInterest);
        
        // Initial calculation on page load
        window.addEventListener('load', calculateCompoundInterest);

    </script>
</body>
</html>

